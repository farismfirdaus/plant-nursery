// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/farismfirdaus/plant-nursery/entity"
	db "github.com/farismfirdaus/plant-nursery/utils/db"

	mock "github.com/stretchr/testify/mock"
)

// Customer is an autogenerated mock type for the Customer type
type Customer struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *Customer) Begin() (db.TrxObj, error) {
	ret := _m.Called()

	var r0 db.TrxObj
	var r1 error
	if rf, ok := ret.Get(0).(func() (db.TrxObj, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() db.TrxObj); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.TrxObj)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, customer
func (_m *Customer) Create(ctx context.Context, customer *entity.Customer) error {
	ret := _m.Called(ctx, customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Customer) error); ok {
		r0 = rf(ctx, customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *Customer) GetByEmail(ctx context.Context, email string) (*entity.Customer, error) {
	ret := _m.Called(ctx, email)

	var r0 *entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Customer, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Customer); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCustomer creates a new instance of Customer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Customer {
	mock := &Customer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
