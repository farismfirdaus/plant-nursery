// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/farismfirdaus/plant-nursery/entity"
	db "github.com/farismfirdaus/plant-nursery/utils/db"

	mock "github.com/stretchr/testify/mock"
)

// Plant is an autogenerated mock type for the Plant type
type Plant struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *Plant) Begin() (db.TrxObj, error) {
	ret := _m.Called()

	var r0 db.TrxObj
	var r1 error
	if rf, ok := ret.Get(0).(func() (db.TrxObj, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() db.TrxObj); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.TrxObj)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Creates provides a mock function with given fields: ctx, plants
func (_m *Plant) Creates(ctx context.Context, plants []*entity.Plant) error {
	ret := _m.Called(ctx, plants)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*entity.Plant) error); ok {
		r0 = rf(ctx, plants)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetList provides a mock function with given fields: ctx
func (_m *Plant) GetList(ctx context.Context) ([]*entity.Plant, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.Plant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entity.Plant, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Plant); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Plant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListByIDs provides a mock function with given fields: ctx, ids
func (_m *Plant) GetListByIDs(ctx context.Context, ids []int) ([]*entity.Plant, error) {
	ret := _m.Called(ctx, ids)

	var r0 []*entity.Plant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int) ([]*entity.Plant, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int) []*entity.Plant); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Plant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStockByID provides a mock function with given fields: ctx, id, stock
func (_m *Plant) UpdateStockByID(ctx context.Context, id int, stock int) error {
	ret := _m.Called(ctx, id, stock)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, id, stock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPlant creates a new instance of Plant. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlant(t interface {
	mock.TestingT
	Cleanup(func())
}) *Plant {
	mock := &Plant{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
