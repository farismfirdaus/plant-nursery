// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/farismfirdaus/plant-nursery/entity"
	db "github.com/farismfirdaus/plant-nursery/utils/db"

	mock "github.com/stretchr/testify/mock"
)

// Cart is an autogenerated mock type for the Cart type
type Cart struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *Cart) Begin() (db.TrxObj, error) {
	ret := _m.Called()

	var r0 db.TrxObj
	var r1 error
	if rf, ok := ret.Get(0).(func() (db.TrxObj, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() db.TrxObj); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.TrxObj)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, to, cart
func (_m *Cart) Create(ctx context.Context, to db.TrxObj, cart *entity.Cart) error {
	ret := _m.Called(ctx, to, cart)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.TrxObj, *entity.Cart) error); ok {
		r0 = rf(ctx, to, cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActiveByCustomerID provides a mock function with given fields: ctx, to, customerID
func (_m *Cart) GetActiveByCustomerID(ctx context.Context, to db.TrxObj, customerID int) (*entity.Cart, error) {
	ret := _m.Called(ctx, to, customerID)

	var r0 *entity.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.TrxObj, int) (*entity.Cart, error)); ok {
		return rf(ctx, to, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.TrxObj, int) *entity.Cart); ok {
		r0 = rf(ctx, to, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.TrxObj, int) error); ok {
		r1 = rf(ctx, to, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDAndCustomerID provides a mock function with given fields: ctx, to, id, customerID
func (_m *Cart) GetByIDAndCustomerID(ctx context.Context, to db.TrxObj, id int, customerID int) (*entity.Cart, error) {
	ret := _m.Called(ctx, to, id, customerID)

	var r0 *entity.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.TrxObj, int, int) (*entity.Cart, error)); ok {
		return rf(ctx, to, id, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.TrxObj, int, int) *entity.Cart); ok {
		r0 = rf(ctx, to, id, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.TrxObj, int, int) error); ok {
		r1 = rf(ctx, to, id, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListCartItemsByCartID provides a mock function with given fields: ctx, to, cartID
func (_m *Cart) GetListCartItemsByCartID(ctx context.Context, to db.TrxObj, cartID int) ([]*entity.CartItem, error) {
	ret := _m.Called(ctx, to, cartID)

	var r0 []*entity.CartItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.TrxObj, int) ([]*entity.CartItem, error)); ok {
		return rf(ctx, to, cartID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.TrxObj, int) []*entity.CartItem); ok {
		r0 = rf(ctx, to, cartID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.CartItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.TrxObj, int) error); ok {
		r1 = rf(ctx, to, cartID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, to, cart
func (_m *Cart) Update(ctx context.Context, to db.TrxObj, cart *entity.Cart) error {
	ret := _m.Called(ctx, to, cart)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.TrxObj, *entity.Cart) error); ok {
		r0 = rf(ctx, to, cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: ctx, to, id, status
func (_m *Cart) UpdateStatus(ctx context.Context, to db.TrxObj, id int, status entity.CartStatus) error {
	ret := _m.Called(ctx, to, id, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.TrxObj, int, entity.CartStatus) error); ok {
		r0 = rf(ctx, to, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertItem provides a mock function with given fields: ctx, to, cartItem
func (_m *Cart) UpsertItem(ctx context.Context, to db.TrxObj, cartItem *entity.CartItem) error {
	ret := _m.Called(ctx, to, cartItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.TrxObj, *entity.CartItem) error); ok {
		r0 = rf(ctx, to, cartItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCart creates a new instance of Cart. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCart(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cart {
	mock := &Cart{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
