// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	cart "github.com/farismfirdaus/plant-nursery/services/cart"

	entity "github.com/farismfirdaus/plant-nursery/entity"

	mock "github.com/stretchr/testify/mock"
)

// Cart is an autogenerated mock type for the Cart type
type Cart struct {
	mock.Mock
}

// AddItems provides a mock function with given fields: ctx, customerID, items
func (_m *Cart) AddItems(ctx context.Context, customerID int, items []*cart.AddItemsRequest) []error {
	ret := _m.Called(ctx, customerID, items)

	var r0 []error
	if rf, ok := ret.Get(0).(func(context.Context, int, []*cart.AddItemsRequest) []error); ok {
		r0 = rf(ctx, customerID, items)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// CloseCartByID provides a mock function with given fields: ctx, id
func (_m *Cart) CloseCartByID(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, customerID
func (_m *Cart) Get(ctx context.Context, customerID int) (*entity.Cart, error) {
	ret := _m.Called(ctx, customerID)

	var r0 *entity.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.Cart, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Cart); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDandCustomerID provides a mock function with given fields: ctx, id, customerID
func (_m *Cart) GetByIDandCustomerID(ctx context.Context, id int, customerID int) (*entity.Cart, error) {
	ret := _m.Called(ctx, id, customerID)

	var r0 *entity.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (*entity.Cart, error)); ok {
		return rf(ctx, id, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *entity.Cart); ok {
		r0 = rf(ctx, id, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, id, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCart creates a new instance of Cart. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCart(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cart {
	mock := &Cart{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
