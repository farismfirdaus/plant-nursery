// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/farismfirdaus/plant-nursery/entity"
	db "github.com/farismfirdaus/plant-nursery/utils/db"

	mock "github.com/stretchr/testify/mock"
)

// Order is an autogenerated mock type for the Order type
type Order struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *Order) Begin() (db.TrxObj, error) {
	ret := _m.Called()

	var r0 db.TrxObj
	var r1 error
	if rf, ok := ret.Get(0).(func() (db.TrxObj, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() db.TrxObj); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.TrxObj)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, to, order
func (_m *Order) Create(ctx context.Context, to db.TrxObj, order *entity.Order) error {
	ret := _m.Called(ctx, to, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.TrxObj, *entity.Order) error); ok {
		r0 = rf(ctx, to, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateItems provides a mock function with given fields: ctx, to, orderItems
func (_m *Order) CreateItems(ctx context.Context, to db.TrxObj, orderItems []*entity.OrderItem) error {
	ret := _m.Called(ctx, to, orderItems)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.TrxObj, []*entity.OrderItem) error); ok {
		r0 = rf(ctx, to, orderItems)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetItemsListByOrderID provides a mock function with given fields: ctx, orderID
func (_m *Order) GetItemsListByOrderID(ctx context.Context, orderID int) ([]*entity.OrderItem, error) {
	ret := _m.Called(ctx, orderID)

	var r0 []*entity.OrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*entity.OrderItem, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*entity.OrderItem); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.OrderItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListByCustomerID provides a mock function with given fields: ctx, customerID
func (_m *Order) GetListByCustomerID(ctx context.Context, customerID int) ([]*entity.Order, error) {
	ret := _m.Called(ctx, customerID)

	var r0 []*entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*entity.Order, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*entity.Order); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListUniqueItems provides a mock function with given fields: ctx, customerId
func (_m *Order) GetListUniqueItems(ctx context.Context, customerId int) ([]*entity.OrderItem, error) {
	ret := _m.Called(ctx, customerId)

	var r0 []*entity.OrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*entity.OrderItem, error)); ok {
		return rf(ctx, customerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*entity.OrderItem); ok {
		r0 = rf(ctx, customerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.OrderItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, customerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrder creates a new instance of Order. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Order {
	mock := &Order{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
